package com.jeremy.lychee.db2;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.jeremy.lychee.db2.ThumbsUp;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table THUMBS_UP.
*/
public class ThumbsUpDao extends AbstractDao<ThumbsUp, String> {

    public static final String TABLENAME = "THUMBS_UP";

    /**
     * Properties of entity ThumbsUp.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Voted = new Property(1, boolean.class, "voted", false, "VOTED");
    };


    public ThumbsUpDao(DaoConfig config) {
        super(config);
    }
    
    public ThumbsUpDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'THUMBS_UP' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'VOTED' INTEGER NOT NULL );"); // 1: voted
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_THUMBS_UP_ID ON THUMBS_UP" +
                " (ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'THUMBS_UP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ThumbsUp entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindLong(2, entity.getVoted() ? 1l: 0l);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ThumbsUp readEntity(Cursor cursor, int offset) {
        ThumbsUp entity = new ThumbsUp( //
            cursor.getString(offset + 0), // id
            cursor.getShort(offset + 1) != 0 // voted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ThumbsUp entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setVoted(cursor.getShort(offset + 1) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ThumbsUp entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ThumbsUp entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
