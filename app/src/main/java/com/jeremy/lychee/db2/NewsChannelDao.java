package com.jeremy.lychee.db2;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.jeremy.lychee.db2.NewsChannel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NEWS_CHANNEL.
*/
public class NewsChannelDao extends AbstractDao<NewsChannel, String> {

    public static final String TABLENAME = "NEWS_CHANNEL";

    /**
     * Properties of entity NewsChannel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Cid = new Property(0, String.class, "cid", true, "CID");
        public final static Property Cname = new Property(1, String.class, "cname", false, "CNAME");
        public final static Property Icon = new Property(2, String.class, "icon", false, "ICON");
        public final static Property Tagname = new Property(3, String.class, "tagname", false, "TAGNAME");
        public final static Property Init = new Property(4, String.class, "init", false, "INIT");
        public final static Property Is_start = new Property(5, String.class, "is_start", false, "IS_START");
        public final static Property IsShow = new Property(6, Boolean.class, "isShow", false, "IS_SHOW");
    };


    public NewsChannelDao(DaoConfig config) {
        super(config);
    }
    
    public NewsChannelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NEWS_CHANNEL' (" + //
                "'CID' TEXT PRIMARY KEY NOT NULL ," + // 0: cid
                "'CNAME' TEXT," + // 1: cname
                "'ICON' TEXT," + // 2: icon
                "'TAGNAME' TEXT," + // 3: tagname
                "'INIT' TEXT," + // 4: init
                "'IS_START' TEXT," + // 5: is_start
                "'IS_SHOW' INTEGER);"); // 6: isShow
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NEWS_CHANNEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewsChannel entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCid());
 
        String cname = entity.getCname();
        if (cname != null) {
            stmt.bindString(2, cname);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(3, icon);
        }
 
        String tagname = entity.getTagname();
        if (tagname != null) {
            stmt.bindString(4, tagname);
        }
 
        String init = entity.getInit();
        if (init != null) {
            stmt.bindString(5, init);
        }
 
        String is_start = entity.getIs_start();
        if (is_start != null) {
            stmt.bindString(6, is_start);
        }
 
        Boolean isShow = entity.getIsShow();
        if (isShow != null) {
            stmt.bindLong(7, isShow ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NewsChannel readEntity(Cursor cursor, int offset) {
        NewsChannel entity = new NewsChannel( //
            cursor.getString(offset + 0), // cid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // icon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tagname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // init
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // is_start
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // isShow
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewsChannel entity, int offset) {
        entity.setCid(cursor.getString(offset + 0));
        entity.setCname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIcon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTagname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIs_start(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsShow(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(NewsChannel entity, long rowId) {
        return entity.getCid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(NewsChannel entity) {
        if(entity != null) {
            return entity.getCid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
