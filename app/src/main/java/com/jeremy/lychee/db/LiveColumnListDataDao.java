package com.jeremy.lychee.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LIVE_COLUMN_LIST_DATA.
*/
public class LiveColumnListDataDao extends AbstractDao<LiveColumnListData, String> {

    public static final String TABLENAME = "LIVE_COLUMN_LIST_DATA";

    /**
     * Properties of entity LiveColumnListData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Video_channel_name = new Property(1, String.class, "video_channel_name", false, "VIDEO_CHANNEL_NAME");
        public final static Property Video_name = new Property(2, String.class, "video_name", false, "VIDEO_NAME");
        public final static Property Video_column_name = new Property(3, String.class, "video_column_name", false, "VIDEO_COLUMN_NAME");
        public final static Property Video_desc = new Property(4, String.class, "video_desc", false, "VIDEO_DESC");
        public final static Property Video_icon = new Property(5, String.class, "video_icon", false, "VIDEO_ICON");
        public final static Property Video_img = new Property(6, String.class, "video_img", false, "VIDEO_IMG");
        public final static Property Video_islive = new Property(7, String.class, "video_islive", false, "VIDEO_ISLIVE");
        public final static Property Video_relate_id = new Property(8, String.class, "video_relate_id", false, "VIDEO_RELATE_ID");
        public final static Property Video_play_url = new Property(9, String.class, "video_play_url", false, "VIDEO_PLAY_URL");
        public final static Property Tag = new Property(10, String.class, "tag", false, "TAG");
        public final static Property Pdate = new Property(11, String.class, "pdate", false, "PDATE");
        public final static Property Video_duration = new Property(12, String.class, "video_duration", false, "VIDEO_DURATION");
        public final static Property Video_type = new Property(13, String.class, "video_type", false, "VIDEO_TYPE");
        public final static Property Video_publish_status = new Property(14, String.class, "video_publish_status", false, "VIDEO_PUBLISH_STATUS");
        public final static Property Channel_cid = new Property(15, String.class, "channel_cid", false, "CHANNEL_CID");
        public final static Property Column_id = new Property(16, String.class, "column_id", false, "COLUMN_ID");
        public final static Property Time = new Property(17, Long.class, "time", false, "TIME");
        public final static Property News_type = new Property(18, String.class, "news_type", false, "NEWS_TYPE");
        public final static Property News_from = new Property(19, String.class, "news_from", false, "NEWS_FROM");
    };


    public LiveColumnListDataDao(DaoConfig config) {
        super(config);
    }
    
    public LiveColumnListDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LIVE_COLUMN_LIST_DATA' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'VIDEO_CHANNEL_NAME' TEXT," + // 1: video_channel_name
                "'VIDEO_NAME' TEXT," + // 2: video_name
                "'VIDEO_COLUMN_NAME' TEXT," + // 3: video_column_name
                "'VIDEO_DESC' TEXT," + // 4: video_desc
                "'VIDEO_ICON' TEXT," + // 5: video_icon
                "'VIDEO_IMG' TEXT," + // 6: video_img
                "'VIDEO_ISLIVE' TEXT," + // 7: video_islive
                "'VIDEO_RELATE_ID' TEXT," + // 8: video_relate_id
                "'VIDEO_PLAY_URL' TEXT," + // 9: video_play_url
                "'TAG' TEXT," + // 10: tag
                "'PDATE' TEXT," + // 11: pdate
                "'VIDEO_DURATION' TEXT," + // 12: video_duration
                "'VIDEO_TYPE' TEXT," + // 13: video_type
                "'VIDEO_PUBLISH_STATUS' TEXT," + // 14: video_publish_status
                "'CHANNEL_CID' TEXT," + // 15: channel_cid
                "'COLUMN_ID' TEXT," + // 16: column_id
                "'TIME' INTEGER," + // 17: time
                "'NEWS_TYPE' TEXT," + // 18: news_type
                "'NEWS_FROM' TEXT);"); // 19: news_from
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LIVE_COLUMN_LIST_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LiveColumnListData entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
 
        String video_channel_name = entity.getVideo_channel_name();
        if (video_channel_name != null) {
            stmt.bindString(2, video_channel_name);
        }
 
        String video_name = entity.getVideo_name();
        if (video_name != null) {
            stmt.bindString(3, video_name);
        }
 
        String video_column_name = entity.getVideo_column_name();
        if (video_column_name != null) {
            stmt.bindString(4, video_column_name);
        }
 
        String video_desc = entity.getVideo_desc();
        if (video_desc != null) {
            stmt.bindString(5, video_desc);
        }
 
        String video_icon = entity.getVideo_icon();
        if (video_icon != null) {
            stmt.bindString(6, video_icon);
        }
 
        String video_img = entity.getVideo_img();
        if (video_img != null) {
            stmt.bindString(7, video_img);
        }
 
        String video_islive = entity.getVideo_islive();
        if (video_islive != null) {
            stmt.bindString(8, video_islive);
        }
 
        String video_relate_id = entity.getVideo_relate_id();
        if (video_relate_id != null) {
            stmt.bindString(9, video_relate_id);
        }
 
        String video_play_url = entity.getVideo_play_url();
        if (video_play_url != null) {
            stmt.bindString(10, video_play_url);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(11, tag);
        }
 
        String pdate = entity.getPdate();
        if (pdate != null) {
            stmt.bindString(12, pdate);
        }
 
        String video_duration = entity.getVideo_duration();
        if (video_duration != null) {
            stmt.bindString(13, video_duration);
        }
 
        String video_type = entity.getVideo_type();
        if (video_type != null) {
            stmt.bindString(14, video_type);
        }
 
        String video_publish_status = entity.getVideo_publish_status();
        if (video_publish_status != null) {
            stmt.bindString(15, video_publish_status);
        }
 
        String channel_cid = entity.getChannel_cid();
        if (channel_cid != null) {
            stmt.bindString(16, channel_cid);
        }
 
        String column_id = entity.getColumn_id();
        if (column_id != null) {
            stmt.bindString(17, column_id);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(18, time);
        }
 
        String news_type = entity.getNews_type();
        if (news_type != null) {
            stmt.bindString(19, news_type);
        }
 
        String news_from = entity.getNews_from();
        if (news_from != null) {
            stmt.bindString(20, news_from);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LiveColumnListData readEntity(Cursor cursor, int offset) {
        LiveColumnListData entity = new LiveColumnListData( //
            cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // video_channel_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // video_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // video_column_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // video_desc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // video_icon
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // video_img
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // video_islive
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // video_relate_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // video_play_url
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // tag
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // pdate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // video_duration
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // video_type
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // video_publish_status
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // channel_cid
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // column_id
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // time
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // news_type
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // news_from
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LiveColumnListData entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setVideo_channel_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVideo_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVideo_column_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVideo_desc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVideo_icon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVideo_img(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVideo_islive(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVideo_relate_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVideo_play_url(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTag(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPdate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVideo_duration(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setVideo_type(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setVideo_publish_status(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setChannel_cid(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setColumn_id(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTime(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setNews_type(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setNews_from(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(LiveColumnListData entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(LiveColumnListData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
