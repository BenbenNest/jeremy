package com.jeremy.lychee.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WE_MEDIA_TOPIC.
*/
public class WeMediaTopicDao extends AbstractDao<WeMediaTopic, Integer> {

    public static final String TABLENAME = "WE_MEDIA_TOPIC";

    /**
     * Properties of entity WeMediaTopic.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Weight = new Property(2, Integer.class, "weight", false, "WEIGHT");
        public final static Property Image = new Property(3, String.class, "image", false, "IMAGE");
        public final static Property Create_time = new Property(4, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Keyword = new Property(5, String.class, "keyword", false, "KEYWORD");
        public final static Property Update_time = new Property(6, String.class, "update_time", false, "UPDATE_TIME");
        public final static Property Is_sub = new Property(7, Boolean.class, "is_sub", false, "IS_SUB");
    };


    public WeMediaTopicDao(DaoConfig config) {
        super(config);
    }
    
    public WeMediaTopicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WE_MEDIA_TOPIC' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'WEIGHT' INTEGER," + // 2: weight
                "'IMAGE' TEXT," + // 3: image
                "'CREATE_TIME' TEXT," + // 4: create_time
                "'KEYWORD' TEXT," + // 5: keyword
                "'UPDATE_TIME' TEXT," + // 6: update_time
                "'IS_SUB' INTEGER);"); // 7: is_sub
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WE_MEDIA_TOPIC'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WeMediaTopic entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        Integer weight = entity.getWeight();
        if (weight != null) {
            stmt.bindLong(3, weight);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(5, create_time);
        }
 
        String keyword = entity.getKeyword();
        if (keyword != null) {
            stmt.bindString(6, keyword);
        }
 
        String update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindString(7, update_time);
        }
 
        Boolean is_sub = entity.getIs_sub();
        if (is_sub != null) {
            stmt.bindLong(8, is_sub ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WeMediaTopic readEntity(Cursor cursor, int offset) {
        WeMediaTopic entity = new WeMediaTopic( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // weight
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // create_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // keyword
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // update_time
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // is_sub
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WeMediaTopic entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWeight(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreate_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKeyword(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdate_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIs_sub(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(WeMediaTopic entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(WeMediaTopic entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
