package com.jeremy.lychee.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LIVE_HOT_ITEM.
*/
public class LiveHotItemDao extends AbstractDao<LiveHotItem, String> {

    public static final String TABLENAME = "LIVE_HOT_ITEM";

    /**
     * Properties of entity LiveHotItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Video_channel_name = new Property(1, String.class, "video_channel_name", false, "VIDEO_CHANNEL_NAME");
        public final static Property Video_column_id = new Property(2, String.class, "video_column_id", false, "VIDEO_COLUMN_ID");
        public final static Property Video_column_name = new Property(3, String.class, "video_column_name", false, "VIDEO_COLUMN_NAME");
        public final static Property Video_type = new Property(4, String.class, "video_type", false, "VIDEO_TYPE");
        public final static Property Video_desc = new Property(5, String.class, "video_desc", false, "VIDEO_DESC");
        public final static Property Video_name = new Property(6, String.class, "video_name", false, "VIDEO_NAME");
        public final static Property Video_duration = new Property(7, String.class, "video_duration", false, "VIDEO_DURATION");
        public final static Property Video_icon = new Property(8, String.class, "video_icon", false, "VIDEO_ICON");
        public final static Property Video_publish_status = new Property(9, String.class, "video_publish_status", false, "VIDEO_PUBLISH_STATUS");
        public final static Property Video_img = new Property(10, String.class, "video_img", false, "VIDEO_IMG");
        public final static Property Video_islive = new Property(11, String.class, "video_islive", false, "VIDEO_ISLIVE");
        public final static Property Video_play_url = new Property(12, String.class, "video_play_url", false, "VIDEO_PLAY_URL");
        public final static Property Video_url = new Property(13, String.class, "video_url", false, "VIDEO_URL");
        public final static Property Pdate = new Property(14, String.class, "pdate", false, "PDATE");
        public final static Property Tag = new Property(15, String.class, "tag", false, "TAG");
        public final static Property Watches = new Property(16, String.class, "watches", false, "WATCHES");
        public final static Property Is_seg = new Property(17, String.class, "is_seg", false, "IS_SEG");
        public final static Property News_type = new Property(18, String.class, "news_type", false, "NEWS_TYPE");
        public final static Property News_from = new Property(19, String.class, "news_from", false, "NEWS_FROM");
        public final static Property Zm = new Property(20, String.class, "zm", false, "ZM");
        public final static Property Video_key = new Property(21, String.class, "video_key", false, "VIDEO_KEY");
        public final static Property Comment = new Property(22, String.class, "comment", false, "COMMENT");
        public final static Property Ding = new Property(23, String.class, "ding", false, "DING");
        public final static Property Share = new Property(24, String.class, "share", false, "SHARE");
        public final static Property Is_focus = new Property(25, String.class, "is_focus", false, "IS_FOCUS");
        public final static Property Time = new Property(26, Long.class, "time", false, "TIME");
        public final static Property Source = new Property(27, String.class, "source", false, "SOURCE");
    };


    public LiveHotItemDao(DaoConfig config) {
        super(config);
    }
    
    public LiveHotItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LIVE_HOT_ITEM' (" + //
                "'ID' TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "'VIDEO_CHANNEL_NAME' TEXT," + // 1: video_channel_name
                "'VIDEO_COLUMN_ID' TEXT," + // 2: video_column_id
                "'VIDEO_COLUMN_NAME' TEXT," + // 3: video_column_name
                "'VIDEO_TYPE' TEXT," + // 4: video_type
                "'VIDEO_DESC' TEXT," + // 5: video_desc
                "'VIDEO_NAME' TEXT," + // 6: video_name
                "'VIDEO_DURATION' TEXT," + // 7: video_duration
                "'VIDEO_ICON' TEXT," + // 8: video_icon
                "'VIDEO_PUBLISH_STATUS' TEXT," + // 9: video_publish_status
                "'VIDEO_IMG' TEXT," + // 10: video_img
                "'VIDEO_ISLIVE' TEXT," + // 11: video_islive
                "'VIDEO_PLAY_URL' TEXT," + // 12: video_play_url
                "'VIDEO_URL' TEXT," + // 13: video_url
                "'PDATE' TEXT," + // 14: pdate
                "'TAG' TEXT," + // 15: tag
                "'WATCHES' TEXT," + // 16: watches
                "'IS_SEG' TEXT," + // 17: is_seg
                "'NEWS_TYPE' TEXT," + // 18: news_type
                "'NEWS_FROM' TEXT," + // 19: news_from
                "'ZM' TEXT," + // 20: zm
                "'VIDEO_KEY' TEXT," + // 21: video_key
                "'COMMENT' TEXT," + // 22: comment
                "'DING' TEXT," + // 23: ding
                "'SHARE' TEXT," + // 24: share
                "'IS_FOCUS' TEXT," + // 25: is_focus
                "'TIME' INTEGER," + // 26: time
                "'SOURCE' TEXT);"); // 27: source
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LIVE_HOT_ITEM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LiveHotItem entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
 
        String video_channel_name = entity.getVideo_channel_name();
        if (video_channel_name != null) {
            stmt.bindString(2, video_channel_name);
        }
 
        String video_column_id = entity.getVideo_column_id();
        if (video_column_id != null) {
            stmt.bindString(3, video_column_id);
        }
 
        String video_column_name = entity.getVideo_column_name();
        if (video_column_name != null) {
            stmt.bindString(4, video_column_name);
        }
 
        String video_type = entity.getVideo_type();
        if (video_type != null) {
            stmt.bindString(5, video_type);
        }
 
        String video_desc = entity.getVideo_desc();
        if (video_desc != null) {
            stmt.bindString(6, video_desc);
        }
 
        String video_name = entity.getVideo_name();
        if (video_name != null) {
            stmt.bindString(7, video_name);
        }
 
        String video_duration = entity.getVideo_duration();
        if (video_duration != null) {
            stmt.bindString(8, video_duration);
        }
 
        String video_icon = entity.getVideo_icon();
        if (video_icon != null) {
            stmt.bindString(9, video_icon);
        }
 
        String video_publish_status = entity.getVideo_publish_status();
        if (video_publish_status != null) {
            stmt.bindString(10, video_publish_status);
        }
 
        String video_img = entity.getVideo_img();
        if (video_img != null) {
            stmt.bindString(11, video_img);
        }
 
        String video_islive = entity.getVideo_islive();
        if (video_islive != null) {
            stmt.bindString(12, video_islive);
        }
 
        String video_play_url = entity.getVideo_play_url();
        if (video_play_url != null) {
            stmt.bindString(13, video_play_url);
        }
 
        String video_url = entity.getVideo_url();
        if (video_url != null) {
            stmt.bindString(14, video_url);
        }
 
        String pdate = entity.getPdate();
        if (pdate != null) {
            stmt.bindString(15, pdate);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(16, tag);
        }
 
        String watches = entity.getWatches();
        if (watches != null) {
            stmt.bindString(17, watches);
        }
 
        String is_seg = entity.getIs_seg();
        if (is_seg != null) {
            stmt.bindString(18, is_seg);
        }
 
        String news_type = entity.getNews_type();
        if (news_type != null) {
            stmt.bindString(19, news_type);
        }
 
        String news_from = entity.getNews_from();
        if (news_from != null) {
            stmt.bindString(20, news_from);
        }
 
        String zm = entity.getZm();
        if (zm != null) {
            stmt.bindString(21, zm);
        }
 
        String video_key = entity.getVideo_key();
        if (video_key != null) {
            stmt.bindString(22, video_key);
        }
 
        String comment = entity.getComment();
        if (comment != null) {
            stmt.bindString(23, comment);
        }
 
        String ding = entity.getDing();
        if (ding != null) {
            stmt.bindString(24, ding);
        }
 
        String share = entity.getShare();
        if (share != null) {
            stmt.bindString(25, share);
        }
 
        String is_focus = entity.getIs_focus();
        if (is_focus != null) {
            stmt.bindString(26, is_focus);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(27, time);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(28, source);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LiveHotItem readEntity(Cursor cursor, int offset) {
        LiveHotItem entity = new LiveHotItem( //
            cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // video_channel_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // video_column_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // video_column_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // video_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // video_desc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // video_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // video_duration
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // video_icon
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // video_publish_status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // video_img
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // video_islive
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // video_play_url
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // video_url
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // pdate
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // tag
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // watches
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // is_seg
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // news_type
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // news_from
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // zm
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // video_key
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // comment
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // ding
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // share
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // is_focus
            cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26), // time
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27) // source
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LiveHotItem entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setVideo_channel_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVideo_column_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVideo_column_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVideo_type(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVideo_desc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVideo_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVideo_duration(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVideo_icon(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVideo_publish_status(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVideo_img(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVideo_islive(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVideo_play_url(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setVideo_url(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPdate(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTag(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setWatches(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIs_seg(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setNews_type(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setNews_from(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setZm(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setVideo_key(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setComment(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setDing(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setShare(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setIs_focus(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setTime(cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26));
        entity.setSource(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(LiveHotItem entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(LiveHotItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
