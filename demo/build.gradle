import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.8.1'
    }
}

apply plugin: 'com.android.application'
//apply plugin: 'com.neenbedankt.android-apt'
//apply plugin: 'com.tencent.tinker.patch'
//apply plugin: 'me.tatarka.retrolambda'

//retrolambda {
//    javaVersion JavaVersion.VERSION_1_6
//}

//configurations.all {
//    　　resolutionStrategy.force 'com.android.support:support-annotations:23.1.1'
//}
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
//    buildToolsVersion rootProject.ext.android.buildToolsVersion
    useLibrary 'org.apache.http.legacy'

//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
//    }

    //使用 Git tag 或者 hash 作为版本号
    // query git for the SHA, Tag and commit count. Use these to automate versioning.
    def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
    def gitTag = 'git describe --tags'.execute([], project.rootDir).text.trim()
    def gitCommitCount = 100 +
            Integer.parseInt('git rev-list --count HEAD'.execute([], project.rootDir).text.trim())
    println("gitSha=" + gitSha)
    println("gitTag=" + gitTag)
    println("gitCommitCount=" + gitCommitCount)

    def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))
    println(buildTime)

    defaultConfig {
        applicationId "com.jeremy.demo"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode gitCommitCount
        versionName gitTag
        archivesBaseName = "jeremy-${versionName}"
        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        flavorDimensions "color"
//        jackOptions {
//            enabled true
//        }

        ndk {
//            moduleName "myjni"
//            ldLibs "log", "z", "m"
            abiFilters "armeabi", "armeabi-v7a"
        }
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
        // 还可以这样
        buildConfigField "long", "BUILD_TIME_LONG", "${System.currentTimeMillis()}L"
    }

    signingConfigs {
        demo {
            keyAlias 'demo'
            keyPassword '123456'
            storeFile file('demo.jks')
            storePassword '123456'
        }
    }

//    signingConfigs {
//        release {
//            storeFile     "${System.env.PRIVATE_KEY}"
//            keyAlias      "${System.env.ALIAS}"
//            storePassword "${System.env.STORE_PW}"
//            keyPassword   "${System.env.APP_PW}"
//        }
//    }

    /**
     buildTypes 是指建构的类型，一般只用两种默认类型 debug 和 release ，顾名思义 debug 用来配置开发过程中的一些内容；
     release 用来配置正式发布版本的内容；这里面可以设置 applicationIdSuffix 、minifyEnabled 、name 等属性，
     所有的可配置属性参考这里 — BuildType 和 ProductFlavor。
     */
    buildTypes {
        release {
            buildConfigField("boolean", "LOG_DEBUG", "false")
            buildConfigField("String", "SERVER_HOST", "\"jeremy.demo.api/\"")
            minifyEnabled true//最小化资源包
            shrinkResources true//去掉无用资源
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.demo
        }

        debug {
            buildConfigField("boolean", "LOG_DEBUG", "true")
            buildConfigField("String", "SERVER_HOST", "\"test.jeremy.demo.api/\"")
            minifyEnabled false
            signingConfig signingConfigs.demo
        }
    }

    /**
     productFlavors 指各种产品分类，比如免费版本和收费版本。
     有些定制软件可能会出很多版本，通过 productFlavors 就非常方便， 比如某某输入法就经常出各种定制版，这样以后管理代码和发版就方便多了。
     */

    productFlavors {
        free {
            applicationId = "com.jeremy.demo.free"
            buildConfigField "String", "CHANNEL", '"YOUMI"'
            resValue "string", "app_name", "Jeremy free"
            dimension "color"
        }
        pro {
            applicationId = "com.jeremy.demo.pro"
            buildConfigField "String", "CHANNEL", '"OTHER"'
            resValue "string", "app_name", "Jeremy pro"
            dimension "color"
        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            assets.srcDirs = ['src/main/assets']
//            if (build_jni) {
//                jniLibs.srcDirs = ['null']
//            }
            jni.srcDirs = []//disable automatic ndk-build call
            jniLibs.srcDir "src/main/libs"
        }
    }

//    externalNativeBuild {
//        ndkBuild {
//            path './src/main/jni/Android.mk'
//        }
//    }

//    productFlavors {
//        yingyongbao {
//            manifestPlaceholders(["UMENG_CHANNEL_VALUE": "yingyongbao"])
//        }
//        baidu {
//            manifestPlaceholders(["UMENG_CHANNEL_VALUE": "baidu"])
//        }
//    }

    lintOptions {
        abortOnError false
    }

    //修改生成的apk名字及输出文件夹
//    applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            //新名字
//            def newName
//            //时间戳
//            def timeNow
//            //输出文件夹
//            def outDirectory
//            //是否为Jenkins打包，输出路径不同
//            if ("true".equals(IS_JENKINS)) {
//                //BUILD_PATH为服务器输出路径
//                timeNow = BUILD_TIME
//                outDirectory = BUILD_PATH_JENKINS
//                //JKApp-v1.0.1-xiaomi-release.apk
//                newName = APPNAME+"-v"+APP_VERSION + '-' + variant.productFlavors[0].name + '-' + variant.buildType.name + '.apk'
//            } else {
//                //本机打包输出在本机路径
//                timeNow = getDate()
//                outDirectory = BUILD_PATH_LOCAL
//                newName = APPNAME+"-v"+APP_VERSION + '-' + variant.productFlavors[0].name + '-' + variant.buildType.name + '.apk'
//            }
//            output.outputFile = new File(outDirectory+"/"+timeNow, newName)
//        }
//    }

}
configurations.all {
//    exclude group: 'com.android.support', module: 'cardview-v7'
}
// Ensure the no-op dependency is always used in JVM tests.
configurations.all {
        //disable LeakCanary in unit tests
    config ->
        if (config.name.contains('UnitTest')) {
            config.resolutionStrategy.eachDependency { details ->
                if (details.requested.group == 'com.squareup.leakcanary' && details.requested.name == 'leakcanary-android') {
                    details.useTarget(group: details.requested.group, name: 'leakcanary-android-no-op', version: details.requested.version)
                }
            }
        }
}

dependencies {
//    compile fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':library')
    implementation project(':bannerview')
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'

    //android support
    implementation "com.android.support:design:27.1.0"
    implementation 'com.android.support:cardview-v7:27.1.0'

    //butterknife
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    //leakcanary and blockcanary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'
    implementation 'com.github.markzhai:blockcanary-android:1.5.0'
    implementation 'org.aspectj:aspectjrt:1.8.1'

//    compile project(':viewinject-annotation')
//    compile project(':inject')
//    apt project(':viewinject_compiler')
//    compile project(':crop')
//    compile project(':DroidPlugin')
//    compile project(':camera')

//    compile rootProject.ext.dependencies["design"]
//    compile rootProject.ext.dependencies["appcompat-v7"]
//    compile rootProject.ext.dependencies["recyclerview-v7"]

//    compile 'com.android.support.constraint:constraint-layout:1.0.2'
//    compile('com.android.support:appcompat-v7:25.3.1') {
//        exclude group: 'com.android.support', module: 'animated-vector-drawable'
//        exclude group: 'com.android.support', module: 'cardview-v7'
//    }

    //可选，用于生成application类
    //    provided('com.tencent.tinker:tinker-android-anno:1.7.5')
    //tinker的核心库
    //    compile('com.tencent.tinker:tinker-android-lib:1.7.5')
    //    compile 'com.android.support:design:25.3.0'
    //    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    //    compile 'com.android.support:appcompat-v7:23.4.0'
    //    compile 'com.facebook.stetho:stetho:1.5.0'
//    def okhttp3Version = '3.9.1'
//    compile('com.squareup.okhttp3:okhttp:' + okhttp3Version)
//    compile('com.squareup.okhttp3:logging-interceptor:' + okhttp3Version)
//    testCompile('com.squareup.okhttp3:mockwebserver:' + okhttp3Version)
//    compile files('libs/AMap3DMap_5.0.0_AMapNavi_5.0.1_AMapSearch_5.0.0_AMapLocation_3.4.0_20170427.jar')
//    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
//    compile 'io.reactivex.rxjava2:rxjava:2.0.5'
//    compile 'org.reactivestreams:reactive-streams:1.0.0'
//    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
//    compile 'com.facebook.stetho:stetho-okhttp3:1.5.0'
//    compile 'com.bartoszlipinski:recyclerviewheader2:2.0.1'
//    compile 'com.squareup.retrofit2:retrofit:2.1.0'
//    compile 'com.squareup.retrofit2:converter-gson:2.1.0'

//    compile 'com.umeng.analytics:analytics:latest.integration'
    //单元测试
//    testCompile 'junit:junit:4.12'
//    androidTestCompile 'junit:junit:4.12'
//    androidTestCompile 'com.android.support:support-annotations:25.3.1'
//    androidTestCompile "org.mockito:mockito-core:2.+"

//    androidTestCompile 'com.android.support:support-annotations:24.0.0'
//    androidTestCompile 'com.android.support.test:runner:0.5'
//    androidTestCompile 'com.android.support.test:rules:0.5'
    // Optional -- Hamcrest library
//    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
    // Optional -- UI testing with Espresso
//    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    // Optional -- UI testing with UI Automator
//    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'

//    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    })
}

//task compile << {
//    println 'compiling source'
//}
//
//task compileTest(dependsOn: compile) << {
//    println 'compiling unit tests'
//}
//
//task test1(dependsOn: [compile, compileTest]) << {
//    println 'running unit tests'
//}
//
//task dist(dependsOn: [compile, test1]) << {
//    println 'building the distribution'
//}
//
//
//task hello {
//    doLast {
//        println 'Hello World1'
//    }
//}


final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}

