// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from:"config.gradle"
//顶级构建文件
/**
 * The buildscript {} block is where you configure the repositories and
 * dependencies for Gradle itself--meaning, you should not include dependencies
 * for your modules here. For example, this block includes the Android plugin for
 * Gradle as a dependency because it provides the additional instructions Gradle
 * needs to build Android app modules.
 */
buildscript {

    /**
     * The repositories {} block configures the repositories Gradle uses to
     * search or download the dependencies. Gradle pre-configures support for remote
     * repositories such as JCenter, Maven Central, and Ivy. You can also use local
     * repositories or define your own remote repositories. The code below defines
     * JCenter as the repository Gradle should use to look for its dependencies.
     */
    repositories {
        flatDir {
            dirs '../libs'
        }
//        jcenter() {
//            url 'http://jcenter.bintray.com/'
//        }
        mavenCentral()
//        maven {
//            url 'https://maven.google.com/'
//            name 'Google'
//        }
        google()
        jcenter()
        /**

         google()：Android Studio 3.0 现在默认使用 Google 的 Maven 存储库，而不是依赖于 Android SDK Manager 来获取 Android 支持库，
         Google Play 服务，Firebase 和其他依赖项的更新；

         jcenter()和mavenCentral()是Android Studio中Gradle插件使用的仓库

         Android Studio早期版本使用的是mavenCentral，从某个时候开始切换到jcenter了。

         这是因为jcenter在性能和占存储大小方面比mavenCentral更优：

         jcenter是世界上最大的Java仓库
         jcenter通过CDN服务，使用的是https协议，安全性更高，而Android Studio 0.8版本mavenCentral使用的是http协议
         jcenter是mavenCentral的超集，包括许多额外的仓库
         jcenter性能方面比mavenCentral更优
         mavenCentral会自动下载很多与IDE相关的index，而这些用到的少，且不是必需

         */
//        0.7.7.201606060606
    }

    /**
     * The dependencies {} block configures the dependencies Gradle needs to use
     * to build your project. The following line adds Android Plugin for Gradle
     * version 3.1.0 as a classpath dependency.
     */
    dependencies {
//        classpath 'com.android.tools.build:gradle:2.3.2'
//        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath 'com.android.tools.build:gradle:3.1.0'  //Gradle插件的版本，由之前的 2.3.3 改成了 3.0.0。
//        classpath "org.jacoco:org.jacoco.core:0.7.7.201606060606"

//        classpath 'me.tatarka:gradle-retrolambda:3.2.5'
//        classpath 'me.tatarka.retrolambda.projectlombok:lombok.ast:0.2.3.a2'
//        classpath 'org.aspectj:aspectjtools:1.8.1'
//        classpath 'com.fernandocejas.frodo:frodo-plugin:0.8.2'
//        classpath 'com.jakewharton.hugo:hugo-plugin:1.2.1'
//        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
//        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.4.2'
//        classpath 'org.greenrobot:greendao-gradle-plugin:3.1.0'
//        classpath('com.tencent.tinker:tinker-patch-gradle-plugin:1.7.5')
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
//    configurations.classpath.exclude group: 'com.android.tools.external.lombok'


    subprojects {
        project.configurations.all {
            resolutionStrategy.eachDependency { details ->
                if (details.requested.group == 'com.android.support'
                        && !details.requested.name.contains('multidex') ) {
                    details.useVersion "27.1.0"
                }
            }
        }
    }

}

//if (gradle.gradleVersion >= "2.2") {
//    dependencies {
//        classpath 'com.android.tools.build:gradle:1.0.0+'
//    }
//} else if (gradle.gradleVersion >= "2.1") {
//    dependencies {
//        classpath 'com.android.tools.build:gradle:0.14.0+'
//    }
//} else {
//    dependencies {
//        classpath 'com.android.tools.build:gradle:0.12.0+'
//    }
//}

/**
 * The allprojects {} block is where you configure the repositories and
 * dependencies used by all modules in your project, such as third-party plugins
 * or libraries. Dependencies that are not required by all the modules in the
 * project should be configured in module-level build.gradle files. For new
 * projects, Android Studio configures JCenter as the default repository, but it
 * does not configure any dependencies.
 */
allprojects {
    repositories {
        flatDir {
            dirs '../libs'
        }
//        jcenter() {
//            url 'http://jcenter.bintray.com/'
//        }
        mavenCentral()
//        mavenLocal()
//        maven {
//            url 'https://maven.google.com/'
//            name 'Google'
//        }
        google()
        jcenter()
    }
}

//https://developer.android.com/guide/topics/manifest/uses-sdk-element.html
//ext {
//    minSdkVersion = 19
//    targetSdkVersion = 25
//    compileSdkVersion = 25
//    buildToolsVersion = "25.0.3"
//    supportLibraryVersion = '23.4.0'
//}

task clean(type: Delete) {
    delete rootProject.buildDir
}


/**
 gradle3.0或者以上版本	3.0之前(deprecated)	说明	作用
 implementation	compile	gradle升级到3.0之后,新增了 implementation, 而compile 方式被标记为了deprecated, compile 在3.0之后仍然可以使用,但是 gradle 官方说会在 gradle 后续的某次重要升级后变为不可用.	如果我们使用了implementation方式来依赖项目的话,那么这个库就在编译时期,只对当前的module可见,对其他的module不可见,但是在运行使其是可见的,这种方式的好处是可以显著减少 build项目的时间,因为假如该依赖库有接口或者代码变动,那么Gradle只会去重新编译和它有直接依赖关系的module,也就是该库不存在传递性
 api	compile	同上	使用api方式来依赖项目或者库的话,那么这个库,在编译时期和运行时期都可以对其他module可见
 compileOnly	provided	3.0之后版本,使用compileOnly来替代provided	假如在项目中,对某些库你只是想要在编译时期使用,而在运行时期并不需要这个库,你可以使用这种方式!
 runtimeOnly	apk	3.0之后,使用 runtinmeOnly来替代apk	Gradle 在运行时会将该库添加到 build 的 output 中去
 */